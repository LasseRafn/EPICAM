«IMPORT core»
«EXTENSION template::CommonFieldUtilExt»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(String projectName) FOR CardEntity»
«FILE "/" + projectName.toLowerCase() + "/app/" + name.toFirstUpper() + "Edit.java"»
package org.imogene.android.«projectName.toLowerCase()-».app;


import java.util.ArrayList;
import java.util.List;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.widget.Toast;

import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;

import fr.medes.android.app.ViewPagerIndicatorActivity;
import fr.medes.android.database.sqlite.stmt.Where;

import org.imogene.android.Constants.Extras;
import org.imogene.android.common.binary.Binary;
import org.imogene.android.database.sqlite.ImogOpenHelper;
import org.imogene.android.notification.NotificationController;
import org.imogene.android.preference.Preferences;
import org.imogene.android.sync.SyncManager;
import org.imogene.android.util.DatabaseUtils;
import org.imogene.android.util.DialogFactory;
import org.imogene.android.util.IamLost;
import org.imogene.android.widget.ErrorAdapter;
import org.imogene.android.widget.ErrorAdapter.ErrorEntry;
import org.imogene.android.widget.ImogPagerAdapter;
import org.imogene.android.widget.field.FieldManager;
import org.imogene.android.widget.field.BaseField;
import org.imogene.android.widget.field.BaseField.OnValueChangeListener;
import org.imogene.android.widget.field.edit.RelationFieldEdit.ConstraintBuilder;
import org.imogene.android.widget.field.edit.RelationFieldEdit.RelationManager;
import org.imogene.android.widget.field.edit.*;
import org.imogene.android.«projectName.toLowerCase()».R;
import org.imogene.android.«projectName.toLowerCase()».domain.*;
import org.imogene.android.«projectName.toLowerCase()».security.AccessPolicy;

public class «name.toFirstUpper()-»Edit extends ViewPagerIndicatorActivity implements 
		OnClickListener, OnValueChangeListener, RelationManager<«name.toFirstUpper()»> {

	private static final int DIALOG_UNSAVED_ID = 1;
	private static final int DIALOG_ERROR_ID = 2;
	private static final int DIALOG_IAMLOST_ID = 3;
	
	private final ArrayList<ErrorEntry> mErrors = new ArrayList<ErrorEntry>();
	private ErrorAdapter mAdapter;
	
	private FieldManager mManager;
	
	«FOREACH groups.fields AS f-»
	private «EXPAND android::template::EditorUtils::classInClass FOR f» «f.name.toFirstLower()»;
	«ENDFOREACH»
	«IF hasDynamicFields-»
	private DynamicFieldsEdit dynamicFields;
	«ENDIF-»
	
	private «name.toFirstUpper()» mEntity;
	private Uri mUri;
	private AccessPolicy mPolicy;
	
	private boolean mMarkAsRead = false;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		IamLost.getInstance().add(getTitle().toString());
		
		mPolicy = AccessPolicy.getPolicy(this);
		
		mEntity = («name.toFirstUpper()») getLastNonConfigurationInstance();
		if (mEntity == null) {
			if (Intent.ACTION_INSERT.equals(getIntent().getAction())) {
				if (getIntent().hasExtra(Extras.EXTRA_ENTITY)) {
					mEntity = new «name.toFirstUpper()»(getIntent().getBundleExtra(Extras.EXTRA_ENTITY));
				} else {
					mEntity = new «name.toFirstUpper()»();
				}
			} else {
				mUri = getIntent().getData();
				mEntity = ImogOpenHelper.fromUri(mUri);
				if (!mEntity.getFlagRead()) {
					mMarkAsRead = true;
				}
			}
		}
		
		mManager = new FieldManager(this, 100);
		
		LayoutInflater.from(this).inflate(R.layout.«name.toLowerCase()»_edit, getViewPager(), true);
		
		«FOREACH groups.fields AS f-»
			«f.name.toFirstLower()» = («EXPAND android::template::EditorUtils::classInClass FOR f») findViewById(R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR f»);
		«ENDFOREACH-»
		«IF hasDynamicFields-»
		dynamicFields = (DynamicFieldsEdit) findViewById(R.id.«name.toLowerCase()»_dynamic_fields);
		«ENDIF-»
	
		«FOREACH groups.fields AS f-»
			«EXPAND android::template::EditorUtils::specificInit FOR f-»
			«EXPAND android::template::EditorUtils::dependency FOREACH f.fieldDependentVisibility-»
			«f.name.toFirstLower()».setOnValueChangedListener(this);
			«f.name.toFirstLower()».onAttachedToHierarchy(mManager);
		«ENDFOREACH»
		«IF hasDynamicFields-»
		dynamicFields.setOnValueChangedListener(this);
		dynamicFields.setFormType(«name.toFirstUpper()».Columns.BEAN_TYPE);
		dynamicFields.buildViews();
		dynamicFields.onAttachedToHierarchy(mManager);
		«ENDIF-»
		
		«FOREACH groups.fields AS f-»
		«f.name.toFirstLower()».setValue(mEntity.get«f.name.toFirstUpper()»());
		«ENDFOREACH»
		«IF hasDynamicFields-»
		dynamicFields.setValue(mEntity.getDynamicFieldValues());
		«ENDIF-»
		
		ImogPagerAdapter adapter = new ImogPagerAdapter(this);
		
		«FOREACH groups AS group»
		if (mPolicy.canRead«name.toFirstUpper()»«group.name.toFirstUpper()»() ||
			mPolicy.canEdit«name.toFirstUpper()»«group.name.toFirstUpper()»()) {
			adapter.addPage(R.string.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR group», R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR group»);

			if (!mPolicy.canEdit«name.toFirstUpper()»«group.name.toFirstUpper()»()) {
				«FOREACH group.fields AS f-»
				«f.name.toFirstLower()».setReadOnly(true);
				«ENDFOREACH-»
			}
		}
		«ENDFOREACH»
		
		«IF hasDynamicFields-»
		if (!dynamicFields.isEmpty()) {
			adapter.addPage(R.string.«name.toLowerCase()»_dynamic_field_group, R.id.«name.toLowerCase()»_dynamic_field_group);
		}
		«ENDIF-»
		
		getViewPager().setAdapter(adapter);
		getViewPager().setOffscreenPageLimit(«groups.size - 1»);
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		adjustMessageNotification(true);
		if (mMarkAsRead) {
			DatabaseUtils.markRead(getContentResolver(), mUri, true);
			mMarkAsRead = false;
		}
	}

	@Override
	protected void onPause() {
		super.onPause();
		adjustMessageNotification(false);
	}
	
	@Override
	public Object onRetainNonConfigurationInstance() {
		return mEntity;
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		mManager.dispatchActivityResult(requestCode, resultCode, data);
	}
	
	@Override
	public void onBackPressed() {
		showDialog(DIALOG_UNSAVED_ID);
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		IamLost.getInstance().remove();
		mManager.dispatchActivityDestroy();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getSupportMenuInflater().inflate(R.menu.imog__menu_edit, menu);
		return super.onCreateOptionsMenu(menu);
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.imog__menu_iamlost :
			showDialog(DIALOG_IAMLOST_ID);
			return true;
		case R.id.imog__menu_save :
			save();
			return true;
		default :
			return super.onOptionsItemSelected(item);
		}
	}
	
	@Override
	protected Dialog onCreateDialog(int id) {
		switch (id) {
			case DIALOG_UNSAVED_ID :
				return new AlertDialog.Builder(this)
				.setTitle(android.R.string.dialog_alert_title)
				.setMessage(R.string.imog__unsaved_dialog_msg)
				.setPositiveButton(android.R.string.yes, this)
				.setNegativeButton(R.string.imog__no, this)
				.setNeutralButton(android.R.string.cancel, null)
				.setCancelable(false)
				.create();
			case DIALOG_ERROR_ID :
				return new AlertDialog.Builder(this)
				.setTitle(android.R.string.dialog_alert_title)
				.setAdapter(mAdapter = new ErrorAdapter(this, mErrors), this)
				.setPositiveButton(android.R.string.ok, this)
				.setCancelable(false)
				.create();
			case DIALOG_IAMLOST_ID :
				return DialogFactory.createIamLostDialog(this);
			default :
				return super.onCreateDialog(id);
		}
	}
	
	@Override
	protected void onPrepareDialog(int id, Dialog dialog) {
		super.onPrepareDialog(id, dialog);
		switch(id) {
		case DIALOG_ERROR_ID:
			if (mAdapter != null) {
				updateErrorEntries();
			}
			break;
		}
	}
	
	public void onValueChange(BaseField<?> field) {
		switch (field.getId()) {
		«FOREACH groups.fields AS f-»
		case R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR f»:
			mEntity.set«f.name.toFirstUpper()»(«f.name.toFirstLower()».getValue());
			break;
		«ENDFOREACH-»
		«IF hasDynamicFields-»
		case R.id.«name.toLowerCase()»_dynamic_fields:
			mEntity.setDynamicFieldValues(dynamicFields.getValue());
			break;
		«ENDIF-»
		default:
			break;
		}
	}
	
	public void onClick(DialogInterface dialog, int which) {
		switch (which) {
		case Dialog.BUTTON_POSITIVE:
			save();
			break;
		case Dialog.BUTTON_NEGATIVE:
			finish();
			break;
		default:
			if (which >= 0) {
				ErrorEntry entry = mAdapter.getItem(which);
				getViewPager().setCurrentItem(((ImogPagerAdapter) getViewPager().getAdapter()).getViewPosition(entry.getTag()));
				entry.getField().requestFocusFromTouch();
			}
			break;
		}
	}
	
	private void adjustMessageNotification(boolean suspend) {
		NotificationController notifier = NotificationController.getInstance(this);
		notifier.suspendMessageNotification(suspend, «name.toFirstUpper()».Columns.NOTIFICATION_ID);
	}
	
	private void updateErrorEntries() {
		mErrors.clear();
		«FOREACH groups.fields AS f-»
		if (!«f.name.toFirstLower()».isValid()) {
			«IF RelationFieldEntity.isAssignableFrom(f.metaType) && ((RelationFieldEntity) f).nestedForm && ((RelationFieldEntity) f).cardinality == 1-»
			«f.name.toFirstLower()».updateErrorEntries(mErrors, R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR f.parentGroup»);
			«ELSE-»
			mErrors.add(«f.name.toFirstLower()».getErrorEntry(R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR f.parentGroup»));
			«ENDIF-»
		}
		«ENDFOREACH-»
		«IF hasDynamicFields-»
		if (!dynamicFields.isValid()) {
			dynamicFields.updateErrorEntries(mErrors, R.id.«name.toLowerCase()»_dynamic_field_group);
		}
		«ENDIF-»
		mAdapter.notifyDataSetChanged();
	}
	
	private boolean validate() {
		«FOREACH groups.fields AS f-»
		if (!«f.name.toFirstLower()».isValid()) {
			return false;
		}
		«ENDFOREACH-»
		«IF hasDynamicFields-»
		if (!dynamicFields.isValid()) {
			return false;
		}
		«ENDIF-»
		return true;
	}
	
	private void save() {
		if (validate()) {
			«EXPAND android::template::EditorUtils::updateAssociatedEntities FOREACH groups.fields-»
			mEntity.prepareForSave(this);
			Uri uri = mEntity.saveOrUpdate(this);
			if (uri != null) {
				Toast.makeText(this, R.string.«name.toLowerCase()»_des_registered, Toast.LENGTH_SHORT).show();
				
				if (Preferences.getPreferences(this).isSyncOnSaveEnabled()) {
					SyncManager.startManualSync(this);
				}
				
				setResult(RESULT_OK, new Intent().setData(uri));
				finish();
			} else {
				setResult(RESULT_CANCELED);
				finish();
			}
		} else {
			showDialog(DIALOG_ERROR_ID);
		}
	}
	
	@Override
	public «name.toFirstUpper()» getParentBean() {
		return mEntity;
	}
	
}
«ENDFILE»
«ENDDEFINE»