«IMPORT core»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(boolean multilogin) FOR Project »
«FILE "/" + name.toLowerCase() + "/app/" + name.toFirstUpper() + "Listing.java"-»
package org.imogene.android.«name.toLowerCase()-».app;

import java.util.ArrayList;
import java.util.List;

import com.actionbarsherlock.app.SherlockExpandableListActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;

import org.imogene.android.app.GeneralSettings;
import org.imogene.android.common.model.EntityInfo;
import org.imogene.android.sync.SyncManager;
import org.imogene.android.widget.ThemaExpandableListAdapter;
import org.imogene.android.«name.toLowerCase()».R;
import org.imogene.android.«name.toLowerCase()».domain.*;
import org.imogene.android.«name.toLowerCase()».security.AccessPolicy;

import android.content.Intent;
import android.database.ContentObserver;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.TextView;
import android.widget.Toast;

public class «name.toFirstUpper()»Listing extends SherlockExpandableListActivity {

	// The timeout needed to reset the exit status for back button
	// After this time user need to tap 2 times the back button to
	// exit, and the toast is shown again after the first tap.
	private static final int RELEASE_EXIT_CHECK_TIMEOUT = 3500;

	private final Handler mHandler = new Handler();
	
	private final ContentObserver mObserver = new ContentObserver(mHandler) {
	
		@Override
		public boolean deliverSelfNotifications() {
			return true;
		}
	
		@Override
		public void onChange(boolean selfChange) {
			super.onChange(selfChange);
			((BaseExpandableListAdapter) getExpandableListAdapter()).notifyDataSetChanged();
		}
	};
	
	private long mExitBackTimeout = -1;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.imog__expandable_list_content);
		fillData();

		TextView empty = (TextView) findViewById(R.id.imog__emptyText);
		empty.setText(R.string.imog__noPolicyHelpText);
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		getContentResolver().unregisterContentObserver(mObserver);
	}
	
	public final void restart() {
		startActivity(getIntent());
		finish();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getSupportMenuInflater().inflate(R.menu.imog__menu_thema, menu);
		menu.findItem(R.id.imog__menu_preferences).setIntent(new Intent(this, GeneralSettings.class));
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.imog__menu_sync :
			SyncManager.startManualSync(this);
			return true;
		default :
			return super.onOptionsItemSelected(item);
		}
	}
	
	@Override
	public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
		EntityInfo entity = (EntityInfo) getExpandableListAdapter().getChild(groupPosition, childPosition);
		startActivity(new Intent(Intent.ACTION_VIEW, entity.contentUri));
		return true;
	}
	
	@Override
	public void onBackPressed() {
		// Retrieve if the exit status timeout has expired
		long now = System.currentTimeMillis();
		boolean timeout = (mExitBackTimeout == -1 || (now - mExitBackTimeout) > RELEASE_EXIT_CHECK_TIMEOUT);
		// Check if the user was advised in the last back action
		if (timeout) {
			// Communicate the user that the next time the application will be closed
			this.mExitBackTimeout = System.currentTimeMillis();
			Toast.makeText(this, R.string.imog__msg_push_again_to_exit, Toast.LENGTH_SHORT).show();
			return;
		}

		// Back action not applied
		finish();
	}

	protected final void fillData() {
		ArrayList<Integer> groupData = new ArrayList<Integer>();
		ArrayList<List<EntityInfo>> childData = new ArrayList<List<EntityInfo>>();
		
		«IF hasMiscellaneousThema(entities, themas)-»
		ArrayList<EntityInfo> themaMiscellaneous = new ArrayList<EntityInfo>();
		«ENDIF-»
		«FOREACH themas AS thema-»
		ArrayList<EntityInfo> thema«thema.name.toFirstUpper()-» = new ArrayList<EntityInfo>();
		«ENDFOREACH-»
		
		AccessPolicy policy = AccessPolicy.getPolicy(this);

		«FOREACH entities AS entity-»
		«IF entity.topLevel-»
			if (policy.canDirectAccess«entity.name.toFirstUpper()»()) {
				getContentResolver().registerContentObserver(«entity.name.toFirstUpper()».Columns.CONTENT_URI, true, mObserver);
				«IF isInMiscellaneousThema(themas, entity)-»
				themaMiscellaneous.add(«name.toFirstUpper()»Helper.EI_«entity.name.toUpperCase()»);
				«ELSE-»
				«FOREACH themas AS thema-»
				«IF thema.entities.contains(entity)-»
				thema«thema.name.toFirstUpper()».add(«name.toFirstUpper()»Helper.EI_«entity.name.toUpperCase()»);
				«ENDIF-»
				«ENDFOREACH-»
				«ENDIF-»
			}
		«ENDIF-»
		«ENDFOREACH-»
		
		«IF hasMiscellaneousThema(entities, themas)-»
		if (!themaMiscellaneous.isEmpty()) {
			groupData.add(R.string.thema_miscellaneous);
			childData.add(themaMiscellaneous);
		}
		«ENDIF-»
		«FOREACH themas AS thema-»
		if (!thema«thema.name.toFirstUpper()-».isEmpty()) {
			groupData.add(R.string.thema_«thema.name.toLowerCase()-»);
			childData.add(thema«thema.name.toFirstUpper()-»);
		}
		«ENDFOREACH-»

		ThemaExpandableListAdapter adapter = new ThemaExpandableListAdapter(this, groupData, childData);
		setListAdapter(adapter);

    }
    
}
«ENDFILE-»
«ENDDEFINE»