«IMPORT core»
«EXTENSION template::CommonFieldUtilExt»
«EXTENSION android::template::DatesGenExt»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(String projectName, String modelName) FOR CardEntity»
«FILE "/" + projectName.toLowerCase() + "/domain/" + name.toFirstUpper() + ".java"»
package org.imogene.android.«projectName.toLowerCase()».domain;

import android.content.ContentValues;
import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import fr.medes.android.database.sqlite.stmt.QueryBuilder;
import fr.medes.android.util.FormatHelper;
import fr.medes.android.util.Utility;
import fr.medes.android.util.content.ContentUrisUtils;
import fr.medes.android.util.field.EnumHelper;
import fr.medes.android.xml.annotation.XmlAlias;
import fr.medes.android.xml.annotation.XmlConverter;
import fr.medes.android.xml.annotation.XmlOmitField;
import fr.medes.android.xml.converters.BooleanConverter;
import fr.medes.android.xml.converters.DateConverter;
import fr.medes.android.xml.converters.EnumConverter;
import fr.medes.android.xml.converters.EnumMultiConverter;
import fr.medes.android.xml.converters.FloatConverter;
import fr.medes.android.xml.converters.GpsConverter;
import fr.medes.android.xml.converters.IntegerConverter;
import fr.medes.android.xml.converters.StringConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.imogene.android.Constants;
import org.imogene.android.common.binary.Binary;
import org.imogene.android.common.entity.GpsLocation;
import org.imogene.android.common.entity.ImogActor;
import org.imogene.android.common.entity.ImogActorImpl;
import org.imogene.android.common.entity.ImogBean;
import org.imogene.android.common.entity.ImogBeanImpl;
import org.imogene.android.common.entity.ImogEntity;
import org.imogene.android.common.entity.ImogEntityImpl;
import org.imogene.android.common.entity.IsGeoreferenced;
import org.imogene.android.common.entity.LocalizedText;
import org.imogene.android.database.sqlite.ImogOpenHelper;
import org.imogene.android.xml.converters.AssociationConverter;
import org.imogene.android.xml.converters.CollectionConverter;
import org.imogene.android.xml.converters.LocalizedTextConverter;
import org.imogene.android.«projectName.toLowerCase()».R;
import org.imogene.android.«projectName.toLowerCase()».database.sqlite.«name.toFirstUpper()»Cursor;

@XmlAlias("org.imogene.«modelName.toLowerCase()».domain.entity.«name»")
public class «name.toFirstUpper()» extends 
«IF Actor.isAssignableFrom(metaType)»ImogActorImpl«ELSE»«IF hasDynamicFields»ImogEntityImpl«ELSE»ImogBeanImpl«ENDIF»«ENDIF»
«IF georeferenced != null»implements IsGeoreferenced«ENDIF»
 {

	public static class Columns implements «IF Actor.isAssignableFrom(metaType)»ImogActor.Columns«ELSE»«IF hasDynamicFields»ImogEntity.Columns«ELSE»ImogBean.Columns«ENDIF»«ENDIF» {
		public static final Drawable COLOR = Utility.getColorChip(Color.parseColor(«IF color.length > 0»"#«color»"«ELSE»"black"«ENDIF»));
		public static final String TABLE_NAME = "«name.toLowerCase()»";
		public static final String BEAN_TYPE = "«shortName»";
		public static final Uri CONTENT_URI = ContentUrisUtils.buildUriForFragment(Constants.AUTHORITY, TABLE_NAME);
		public static final int NOTIFICATION_ID = «next()»;
		
		«EXPAND column FOREACH groups.fields-»
		
		«EXPAND nTonTable FOREACH groups.fields-»
		
		«EXPAND columnGetter FOREACH groups.fields-»
	}
	
	«EXPAND declaration FOREACH groups.fields-»
	
	public «name.toFirstUpper()»() {
	}
	
	public «name.toFirstUpper()»(«name.toFirstUpper()»Cursor cursor) {
		super(cursor);
		«FOREACH groups.fields AS field-»
		«field.name.toFirstLower()» = cursor.get«field.name.toFirstUpper()-»();
		«ENDFOREACH-»
	}

	public «name.toFirstUpper()»(Bundle bundle) {
		super(bundle);
		«EXPAND createFromBundle FOREACH groups.fields-»
	}
	
	public «name.toFirstUpper()»(Parcel in) {
		super(in);
		«EXPAND createFromParcel FOREACH groups.fields-»
	}
	
	«EXPAND generateGetter FOREACH groups.fields»
	«EXPAND generateSetter FOREACH groups.fields»
	
	«IF georeferenced != null-»
	@Override
	public Location getGeoreference() {
		return «georeferenced.name.toFirstLower()»;
	}
	
	@Override
	public void setGeoreference(Location location) {
		this.«georeferenced.name.toFirstLower()» = location;
	}
	«ENDIF-»
	
	@Override
	protected final void addValues(Context context, ContentValues values) {
		super.addValues(context, values);
		«EXPAND commit FOREACH groups.fields-»
	}
	
	@Override
	protected final void postCommit(Context context) {
		super.postCommit(context);
		«EXPAND postCommit FOREACH groups.fields-»
	}
	
	public final void reset() {
		«EXPAND reset FOREACH groups.fields-»
	}
	
	public Uri saveOrUpdate(Context context) {
		return saveOrUpdate(context, Columns.CONTENT_URI);
	}
	
	public void prepareForSave(Context context) {
		prepareForSave(context, Columns.BEAN_TYPE);
	}
	
	@Override
	public String getMainDisplay(Context context) {
		if (getDeleted() != null) {
			return context.getString(R.string.imog__deleted);
		}

		StringBuilder str = new StringBuilder();
		«EXPAND getDisplay FOREACH getMainFields(this)-»
		return str.toString();
	}
	
	@Override
	public String getSecondaryDisplay(Context context) {
		if (getDeleted() != null) {
			return null;
		}

		StringBuilder str = new StringBuilder();
		«EXPAND getDisplay FOREACH secondaryFields-»
		return str.toString();
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		super.writeToParcel(dest, flags);
		«EXPAND writeToParcel FOREACH groups.fields-»
	}
	
	@XmlOmitField
	public static final Parcelable.Creator<«name.toFirstUpper()»> CREATOR = new Parcelable.Creator<«name.toFirstUpper()»>() {
		public «name.toFirstUpper()» createFromParcel(Parcel in) {
			return new «name.toFirstUpper()»(in);
		}

		public «name.toFirstUpper()»[] newArray(int size) {
			return new «name.toFirstUpper()»[size];
		}
	};

}
«ENDFILE»
«ENDDEFINE»




«DEFINE column FOR FieldEntity-»
public static final String «name.toUpperCase()» = "«name.toFirstLower()»";
«ENDDEFINE»

«DEFINE column FOR TextField-»
«IF translatable-»
public static final String «name.toUpperCase()» = "«name.toFirstLower()»";
«FOREACH ((Project) eRootContainer).languages AS language-»
public static final String «name.toUpperCase()»_«language.isoCode.toUpperCase()» = "«name.toFirstLower()»_«language.isoCode.toLowerCase()»";
«ENDFOREACH-»
«ELSE-»
public static final String «name.toUpperCase()» = "«name.toFirstLower()»";
«ENDIF-»
«ENDDEFINE»



«DEFINE columnGetter FOR FieldEntity-»
«ENDDEFINE»

«DEFINE columnGetter FOR TextField-»
«IF translatable-»
public static String get«name.toFirstUpper()»Column() {
	String iso = Locale.getDefault().getLanguage();
	«FOREACH ((Project) eRootContainer).languages AS l SEPARATOR " else "-»
	if ("«l.isoCode»".equals(iso)) {
		return «name.toUpperCase()»_«l.isoCode.toUpperCase()»;
	}
	«ENDFOREACH-»
	return «name.toUpperCase()»_«((Project) eRootContainer).languages.get(0).isoCode.toUpperCase()»;
}
«ENDIF-»
«ENDDEFINE»





«DEFINE nTonTable FOR FieldEntity-»
«ENDDEFINE»

«DEFINE nTonTable FOR MainRelationFieldEntity-»
«IF (cardinality != 1 && getOppositeCardinality(this) != 1)-»
public static final String TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()» = "«shortName.toLowerCase()»";
«ENDIF-»
«ENDDEFINE»

«DEFINE nTonTable FOR ReverseRelationFieldEntity-»
«IF (cardinality != 1 && getOppositeCardinality(this) != 1)-»
public static final String TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()» = "«oppositeRelationField.shortName.toLowerCase()»";
«ENDIF-»
«ENDDEFINE»




«DEFINE declaration FOR FieldEntity-»
«ENDDEFINE»

«DEFINE declaration FOR StringField-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
«IF defaultValue != null && defaultValue.length != 0-»
private String «name.toFirstLower()» = "«defaultValue-»";
«ELSE-»
private String «name.toFirstLower()»;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR TextField-»
«IF translatable-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
private LocalizedText «name.toFirstLower()»;
«ELSE-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
«IF defaultValue != null && defaultValue.length != 0-»
private String «name.toFirstLower()» = "«defaultValue-»";
«ELSE-»
private String «name.toFirstLower()»;
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR IntegerField-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
«IF defaultValue != null && defaultValue.length != 0-»
private Integer «name.toFirstLower()» = Integer.valueOf("«defaultValue-»");
«ELSE-»
private Integer «name.toFirstLower()»;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR FloatField-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
«IF defaultValue != null && defaultValue.length != 0-»
private Float «name.toFirstLower()» = Float.valueOf("«defaultValue-»");
«ELSE-»
private Float «name.toFirstLower()»;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR DatesField-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
«IF defaultValue == "now"-»
private Date «name.toFirstLower()» = new Date();
«ELSEIF defaultValue != null && defaultValue.length > 0-»
	«IF isDate(defaultValue)-»
	private Date «name.toFirstLower()» = Long.valueOf("«convertDate(defaultValue)»");
	«ELSEIF isDateTime(defaultValue)-»
	private Date «name.toFirstLower()» = Long.valueOf("«convertDateTime(defaultValue)»");
	«ELSEIF isTime(defaultValue)-»
	private Date «name.toFirstLower()» = Long.valueOf("«convertTime(defaultValue)»");
	«ELSE-»
	private Date «name.toFirstLower()»;
	«ENDIF»
«ELSE-»
private Date «name.toFirstLower()»;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR BooleanField-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
«IF defaultValue != null && defaultValue.length != 0-»
private Boolean «name.toFirstLower()» = «defaultValue-»;
«ELSE-»
private Boolean «name.toFirstLower()»;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR BinaryField-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
private Binary «name.toFirstLower()»;
«ENDDEFINE»

«DEFINE declaration FOR EnumField-»
«IF multipleSelection-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
@XmlConverter(value = EnumMultiConverter.class, integer = R.array.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR this»_values)
private boolean[] «name.toFirstLower()» = new boolean[«enumValues.size»];
«ELSE-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
@XmlConverter(EnumConverter.class)
	«IF defaultValue != null && defaultValue.length != 0-»
	private int «name.toFirstLower()» = «defaultValue»;
	«ELSE-»
	private int «name.toFirstLower()» = -1;
	«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR GeoField-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
private Location «name.toFirstLower()»;
«ENDDEFINE»

«DEFINE declaration FOR RelationFieldEntity-»
«IF cardinality == 1-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
private «entity.name.toFirstUpper()» «name.toFirstLower()»;
«ELSE-»
@XmlAlias("«EXPAND template::CommonFieldUtil::propertyName FOR this»")
@XmlConverter(CollectionConverter.class)
private List<«entity.name.toFirstUpper()»> «name.toFirstLower()»;
«ENDIF-»
«ENDDEFINE»







«DEFINE reset FOR FieldEntity-»
«name.toFirstLower()» = null;
«ENDDEFINE»

«DEFINE reset FOR EnumField-»
«IF multipleSelection-»
«name.toFirstLower()» = new boolean[«enumValues.size»];
«ELSE-»
«name.toFirstLower()» = -1;
«ENDIF-»
«ENDDEFINE»






«DEFINE generateGetter FOR FieldEntity-»
«ENDDEFINE»

«DEFINE generateGetter FOR StringField-»
public final String get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR TextField-»
«IF translatable-»
public final LocalizedText get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ELSE-»
public final String get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE generateGetter FOR IntegerField-»
public final Integer get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR FloatField-»
public final Float get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR BooleanField-»
public final Boolean get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR DatesField-»
public final Date get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR BinaryField-»
public final Binary get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR EnumField-»
«IF multipleSelection-»
public final boolean[] get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ELSE»
public final int get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDIF»
«ENDDEFINE»

«DEFINE generateGetter FOR GeoField-»
public final Location get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR RelationFieldEntity-»
«IF cardinality == 1-»
public final «entity.name.toFirstUpper()» get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ELSE»
public final List<«entity.name.toFirstUpper()»> get«name.toFirstUpper()-»() {
	return «name.toFirstLower()»;
}
«ENDIF»
«ENDDEFINE»






«DEFINE generateSetter FOR FieldEntity-»
«ENDDEFINE»

«DEFINE generateSetter FOR StringField-»
public final void set«name.toFirstUpper()-»(String «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR TextField-»
«IF translatable-»
public final void set«name.toFirstUpper()»(LocalizedText «name.toFirstLower()») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ELSE-»
public final void set«name.toFirstUpper()-»(String «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE generateSetter FOR IntegerField-»
public final void set«name.toFirstUpper()-»(Integer «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR FloatField-»
public final void set«name.toFirstUpper()-»(Float «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR BooleanField-»
public final void set«name.toFirstUpper()-»(Boolean «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR DatesField-»
public final void set«name.toFirstUpper()-»(Date «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR BinaryField-»
public final void set«name.toFirstUpper()-»(Binary «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR EnumField-»
«IF multipleSelection-»
public final void set«name.toFirstUpper()-»(boolean[] «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ELSE-»
public final void set«name.toFirstUpper()-»(int «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE generateSetter FOR GeoField-»
public final void set«name.toFirstUpper()-»(Location «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR RelationFieldEntity-»
«IF cardinality == 1-»
public final void set«name.toFirstUpper()-»(«entity.name.toFirstUpper()» «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ELSE-»
public final void set«name.toFirstUpper()-»(List<«entity.name.toFirstUpper()»> «name.toFirstLower()-») {
	this.«name.toFirstLower()» = «name.toFirstLower()-»;
}
«ENDIF-»
«ENDDEFINE»







«DEFINE createFromBundle FOR FieldEntity-»
«ENDDEFINE»

«DEFINE createFromBundle FOR RelationFieldEntity-»
if (bundle.containsKey(Columns.«name.toUpperCase()»)) {
	«IF cardinality == 1-»
	«name.toFirstLower()» = bundle.getParcelable(Columns.«name.toUpperCase()»);
	«ELSE-»
	«name.toFirstLower()» = bundle.getParcelableArrayList(Columns.«name.toUpperCase()»);
	«ENDIF-»
}
«ENDDEFINE»





«DEFINE createFromParcel FOR FieldEntity-»
«ENDDEFINE»

«DEFINE createFromParcel FOR StringField-»
«name.toFirstLower()» = in.readString();
«ENDDEFINE»

«DEFINE createFromParcel FOR TextField-»
«IF !translatable-»
«name.toFirstLower()» = in.readString();
«ENDIF-»
«ENDDEFINE»

«DEFINE createFromParcel FOR FloatField-»
«name.toFirstLower()» = (Float) in.readValue(null);
«ENDDEFINE»

«DEFINE createFromParcel FOR IntegerField-»
«name.toFirstLower()» = (Integer) in.readValue(null);
«ENDDEFINE»

«DEFINE createFromParcel FOR DatesField-»
Long «name.toFirstLower()»LongValue = (Long) in.readValue(null);
«name.toFirstLower()» = «name.toFirstLower()»LongValue != null ? new Date(«name.toFirstLower()»LongValue) : null;
«ENDDEFINE»

«DEFINE createFromParcel FOR GeoField-»
«name.toFirstLower()» = in.readParcelable(null);
«ENDDEFINE»

«DEFINE createFromParcel FOR BooleanField-»
«name.toFirstLower()» = (Boolean) in.readValue(null);
«ENDDEFINE»

«DEFINE createFromParcel FOR EnumField-»
«IF multipleSelection-»
in.readBooleanArray(«name.toFirstLower()»);
«ELSE-»
«name.toFirstLower()» = in.readInt();
«ENDIF-»
«ENDDEFINE»





«DEFINE writeToParcel FOR FieldEntity-»
«ENDDEFINE»

«DEFINE writeToParcel FOR StringField-»
dest.writeString(«name.toFirstLower()»);
«ENDDEFINE»

«DEFINE writeToParcel FOR TextField-»
«IF !translatable-»
dest.writeString(«name.toFirstLower()»);
«ENDIF-»
«ENDDEFINE»

«DEFINE writeToParcel FOR FloatField-»
dest.writeValue(«name.toFirstLower()»);
«ENDDEFINE»

«DEFINE writeToParcel FOR IntegerField-»
dest.writeValue(«name.toFirstLower()»);
«ENDDEFINE»

«DEFINE writeToParcel FOR DatesField-»
dest.writeValue(«name.toFirstLower()» != null ? «name.toFirstLower()».getTime() : null);
«ENDDEFINE»

«DEFINE writeToParcel FOR GeoField-»
dest.writeParcelable(«name.toFirstLower()», 0);
«ENDDEFINE»

«DEFINE writeToParcel FOR BooleanField-»
dest.writeValue(«name.toFirstLower()»);
«ENDDEFINE»

«DEFINE writeToParcel FOR EnumField-»
«IF multipleSelection-»
dest.writeBooleanArray(«name.toFirstLower()»);
«ELSE-»
dest.writeInt(«name.toFirstLower()»);
«ENDIF-»
«ENDDEFINE»





«DEFINE commit FOR FieldEntity-»
values.put(Columns.«name.toUpperCase()», «name.toFirstLower()»);
«ENDDEFINE»

«DEFINE commit FOR DatesField-»
values.put(Columns.«name.toUpperCase()», «name.toFirstLower()» != null ? «name.toFirstLower()».getTime() : null);
«ENDDEFINE»

«DEFINE commit FOR TextField-»
«IF translatable-»
if («name.toFirstLower()» != null) {
	«FOREACH ((Project) eRootContainer).languages AS l-»
	values.put(Columns.«name.toUpperCase()»_«l.isoCode.toUpperCase()», «name.toFirstLower()».getValue("«l.isoCode»"));
	«ENDFOREACH-»
} else {
	«FOREACH ((Project) eRootContainer).languages AS l-»
	values.putNull(Columns.«name.toUpperCase()»_«l.isoCode.toUpperCase()»);
	«ENDFOREACH-»
}
«ELSE-»
values.put(Columns.«name.toUpperCase()», «name.toFirstLower()»);
«ENDIF-»
«ENDDEFINE»

«DEFINE commit FOR BooleanField-»
values.put(Columns.«name.toUpperCase()», «name.toFirstLower()» != null ? «name.toFirstLower()».toString() : null);
«ENDDEFINE»

«DEFINE commit FOR EnumField-»
«IF multipleSelection -»
values.put(Columns.«name.toUpperCase()», Arrays.toString(«name.toFirstLower()»));
«ELSE-»
values.put(Columns.«name.toUpperCase()», «name.toFirstLower()»);
«ENDIF-»
«ENDDEFINE»

«DEFINE commit FOR GeoField-»
values.put(Columns.«name.toUpperCase()», GpsLocation.saveLocation(context, «name.toFirstLower()»));
«ENDDEFINE»

«DEFINE commit FOR BinaryField-»
values.put(Columns.«name.toUpperCase()», «name.toFirstLower()» != null ? «name.toFirstLower()».getId() : null);
«ENDDEFINE»

«DEFINE commit FOR MainRelationFieldEntity-»
«IF cardinality == 1-»
values.put(Columns.«name.toUpperCase()», «name.toFirstLower()» != null ? «name.toFirstLower()».getId() : null);
«ENDIF-»
«ENDDEFINE»

«DEFINE commit FOR ReverseRelationFieldEntity-»
«IF cardinality == 1 && getOppositeCardinality(this) != 1-»
values.put(Columns.«name.toUpperCase()», «name.toFirstLower()» != null ? «name.toFirstLower()».getId() : null);
«ENDIF-»
«ENDDEFINE»





«DEFINE postCommit FOR FieldEntity-»
«ENDDEFINE»

«DEFINE postCommit FOR MainRelationFieldEntity-»
«IF cardinality != 1-»
«IF oppositeRelationField != null && getOppositeCardinality(this) == 1-»
{
ContentValues v = new ContentValues();
v.putNull(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField»);
context.getContentResolver().update(«entity.name.toFirstUpper()-».Columns.CONTENT_URI, v, «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField» + "='" + getId() + "'", null);
if («name.toFirstLower()» != null) {
	for («entity.name.toFirstUpper()» e : «name.toFirstLower()») {
		e.set«oppositeRelationField.name.toFirstUpper()»(this);
		e.saveOrUpdate(context);
	}
}
}
«ELSE-»
{
QueryBuilder builder = ImogOpenHelper.getHelper().queryBuilder(Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()»);
builder.where().eq(«parentGroup.parentCard.name.toFirstUpper()».Columns.TABLE_NAME, getId());
builder.delete();
if («name.toFirstLower()» != null) {
	ContentValues v = new ContentValues();
	v.put(«parentGroup.parentCard.name.toFirstUpper()».Columns.TABLE_NAME, getId());
	for («entity.name.toFirstUpper()» e : «name.toFirstLower()») {
		v.put(«entity.name.toFirstUpper()».Columns.TABLE_NAME, e.getId());
		ImogOpenHelper.getHelper().insert(Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()», v);
	}
}
}
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE postCommit FOR ReverseRelationFieldEntity-»
«IF cardinality == 1 && oppositeRelationField != null && oppositeRelationField.cardinality == 1-»
{
ContentValues v = new ContentValues();
v.putNull(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField»);
context.getContentResolver().update(«entity.name.toFirstUpper()-».Columns.CONTENT_URI, v, «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField» + "='" + getId() + "'", null);
if («name.toFirstLower()» != null && «name.toFirstLower()».getId() != null) {
	«name.toFirstLower()».set«oppositeRelationField.name.toFirstUpper()»(this);
	«name.toFirstLower()».saveOrUpdate(context);
}
}
«ELSE»
«IF cardinality != 1»
«IF getOppositeCardinality(this) == 1-»
{
ContentValues v = new ContentValues();
v.putNull(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField»);
context.getContentResolver().update(«entity.name.toFirstUpper()».Columns.CONTENT_URI, v, «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField» + "='" + getId() + "'", null);
if («name.toFirstLower()» != null) {
	for («entity.name.toFirstUpper()» e : «name.toFirstLower()») {
		e.set«oppositeRelationField.name.toFirstUpper()»(this);
		e.saveOrUpdate(context);
	}
}
}
«ELSE»
{
QueryBuilder builder = ImogOpenHelper.getHelper().queryBuilder(Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()»);
builder.where().eq(Columns.TABLE_NAME, getId());
builder.delete();
if («name.toFirstLower()» != null) {
	ContentValues v = new ContentValues();
	v.put(Columns.TABLE_NAME, getId());
	for («entity.name.toFirstUpper()» e : «name.toFirstLower()») {
		v.put(«entity.name.toFirstUpper()».Columns.TABLE_NAME, uri.getId());
		ImogOpenHelper.getHelper().insert(Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()», v);
	}
}
}
«ENDIF»
«ENDIF»
«ENDIF»
«ENDDEFINE»





«DEFINE getDisplay FOR FieldEntity-»
«ENDDEFINE»

«DEFINE getDisplay FOR StringField-»
if («name.toFirstLower()» != null) {
	str.append(«name.toFirstLower()»);
	str.append(" ");
}
«ENDDEFINE»

«DEFINE getDisplay FOR TextField-»
«IF translatable-»
if («name.toFirstLower()» != null) {
	String localized = «name.toFirstLower()».getLocalized();
	if (localized != null) {
		str.append(localized);
		str.append(" ");
	}
}
«ELSE-»
if («name.toFirstLower()» != null) {
	str.append(«name.toFirstLower()»);
	str.append(" ");
}
«ENDIF-»
«ENDDEFINE»

«DEFINE getDisplay FOR NumericField-»
if («name.toFirstLower()» != null) {
	str.append(context.getString(R.string.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR this»_format, «name.toFirstLower()»));
	str.append(" ");
}
«ENDDEFINE»

«DEFINE getDisplay FOR DateField-»
if («name.toFirstLower()» != null) {
	str.append(FormatHelper.displayDate(«name.toFirstLower()»));
	str.append(" ");
}
«ENDDEFINE»

«DEFINE getDisplay FOR DateTimeField-»
if («name.toFirstLower()» != null) {
	str.append(FormatHelper.displayDateTime(«name.toFirstLower()»));
	str.append(" ");
}
«ENDDEFINE»

«DEFINE getDisplay FOR TimeField-»
if («name.toFirstLower()» != null) {
	str.append(FormatHelper.displayTime(«name.toFirstLower()»));
	str.append(" ");
}
«ENDDEFINE»

«DEFINE getDisplay FOR EnumField-»
«IF multipleSelection»
if («name.toFirstLower()» != null) {
	str.append(EnumHelper.displayEnumMulti(
			context,
			R.array.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR this»,
			«name.toFirstLower()»));
	str.append(" ");
}
«ELSE»
if («name.toFirstLower()» != -1) {
	str.append(EnumHelper.displayEnumSingle(
			context,
			R.array.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR this»,
			R.array.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR this»_values,
			«name.toFirstLower()»));
	str.append(" ");
}
«ENDIF-»
«ENDDEFINE»

«DEFINE getDisplay FOR GeoField-»
if («name.toFirstLower()» != null) {
	str.append(FormatHelper.displayLocation(context, «name.toFirstLower()»));
	str.append(" ");
}
«ENDDEFINE»

«DEFINE getDisplay FOR RelationFieldEntity-»
«IF cardinality == 1-»
if («name.toFirstLower()» != null) {
	str.append(«name.toFirstLower()».getMainDisplay(context));
	str.append(" ");
}
«ENDIF-»
«ENDDEFINE»