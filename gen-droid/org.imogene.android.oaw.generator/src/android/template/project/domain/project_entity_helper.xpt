«IMPORT core»
«DEFINE generate FOR Project »
«FILE "/" + name.toLowerCase() + "/domain/" + name.toFirstUpper() + "Helper.java"-»
package org.imogene.android.«name.toLowerCase()».domain;

import java.util.ArrayList;
import java.util.List;

import org.imogene.android.common.binary.Binary;
import org.imogene.android.common.binary.BinaryFile;
import org.imogene.android.common.dynamicfields.DynamicFieldInstance;
import org.imogene.android.common.dynamicfields.DynamicFieldTemplate;
import org.imogene.android.common.entity.DefaultUser;
import org.imogene.android.common.entity.ImogHelper;
import org.imogene.android.common.filter.ClientFilter;
import org.imogene.android.common.model.CardEntity;
import org.imogene.android.common.model.EntityInfo;
import org.imogene.android.common.model.EntityInfo.Policy;
import org.imogene.android.common.model.FieldGroup;
import org.imogene.android.common.profile.EntityProfile;
import org.imogene.android.common.profile.FieldGroupProfile;
import org.imogene.android.common.profile.Profile;
import org.imogene.android.«name.toLowerCase()».R;
import org.imogene.android.«name.toLowerCase()».app.«name.toFirstUpper()»Listing;
import org.imogene.android.«name.toLowerCase()».security.AccessPolicy;

import android.content.Context;
import android.net.Uri;

public class «name.toFirstUpper()»Helper extends ImogHelper {

	public static void init() {
		if (sInstance == null) {
			sInstance = new «name.toFirstUpper()»Helper();
		}
	}
	
	public static final EntityInfo EI_PROFILE = new EntityInfo(
		Profile.class,
		Profile.Columns.CONTENT_URI,
		Profile.Columns.TABLE_NAME,
		Profile.Columns.BEAN_TYPE
	);

	public static final EntityInfo EI_ENTITYPROFILE = new EntityInfo(
		EntityProfile.class,
		EntityProfile.Columns.CONTENT_URI,
		EntityProfile.Columns.TABLE_NAME,
		EntityProfile.Columns.BEAN_TYPE
	);
	
	public static final EntityInfo EI_FIELDGROUPPROFILE = new EntityInfo(
		FieldGroupProfile.class,
		FieldGroupProfile.Columns.CONTENT_URI,
		FieldGroupProfile.Columns.TABLE_NAME,
		FieldGroupProfile.Columns.BEAN_TYPE
	);

	public static final EntityInfo EI_CARDENTITY = new EntityInfo(
		CardEntity.class,
		CardEntity.Columns.CONTENT_URI,
		CardEntity.Columns.TABLE_NAME,
		CardEntity.Columns.BEAN_TYPE
	);

	public static final EntityInfo EI_FIELDGROUP = new EntityInfo(
		FieldGroup.class,
		FieldGroup.Columns.CONTENT_URI,
		FieldGroup.Columns.TABLE_NAME,
		FieldGroup.Columns.BEAN_TYPE
	);
	
	public static final EntityInfo EI_BINARY = new EntityInfo(
		BinaryFile.class,
		Binary.Columns.CONTENT_URI,
		Binary.Columns.TABLE_NAME,
		Binary.Columns.BEAN_TYPE
	);

	public static final EntityInfo EI_CLIENTFILTER = new EntityInfo(
		ClientFilter.class,
		ClientFilter.Columns.CONTENT_URI,
		ClientFilter.Columns.TABLE_NAME,
		ClientFilter.Columns.BEAN_TYPE
	);
	
	public static final EntityInfo EI_DEFAULTUSER = new EntityInfo(
		DefaultUser.class,
		DefaultUser.Columns.CONTENT_URI,
		DefaultUser.Columns.TABLE_NAME,
		DefaultUser.Columns.BEAN_TYPE
	);
	
	public static final EntityInfo EI_DYNAMICFIELDINSTANCE = new EntityInfo(
		DynamicFieldInstance.class,
		DynamicFieldInstance.Columns.CONTENT_URI,
		DynamicFieldInstance.Columns.TABLE_NAME,
		DynamicFieldInstance.Columns.BEAN_TYPE
	);
	
	public static final EntityInfo EI_DYNAMICFIELDTEMPLATE = new EntityInfo(
		DynamicFieldTemplate.class,
		DynamicFieldTemplate.Columns.CONTENT_URI,
		DynamicFieldTemplate.Columns.TABLE_NAME,
		DynamicFieldTemplate.Columns.BEAN_TYPE
	);

	«FOREACH entities AS e-»
	public static final EntityInfo EI_«e.name.toUpperCase()» = new EntityInfo(
		«e.name.toFirstUpper()».class,
		«e.name.toFirstUpper()».Columns.CONTENT_URI,
		«e.name.toFirstUpper()».Columns.TABLE_NAME,
		«e.name.toFirstUpper()».Columns.BEAN_TYPE,
		R.string.«e.name.toLowerCase()»_des_pl,
		«IF e.icon.length > 0»R.drawable.«e.icon.split("\\.").get(0).toLowerCase()»«ELSE»R.drawable.imog__logo_android_s«ENDIF»,
		«e.name.toFirstUpper()».Columns.COLOR,
		«e.name.toFirstUpper()».Columns.NOTIFICATION_ID,
		new Policy() {
			@Override
			public boolean canDirectAccess(Context context) {
				return AccessPolicy.getPolicy(context).canDirectAccess«e.name.toFirstUpper()»();
			}
		}
	);
	«ENDFOREACH-»
	
	private static final ArrayList<EntityInfo> entityInfos = new ArrayList<EntityInfo>();
	
	static {
		entityInfos.add(EI_PROFILE);
		entityInfos.add(EI_ENTITYPROFILE);
		entityInfos.add(EI_FIELDGROUPPROFILE);
		entityInfos.add(EI_CARDENTITY);
		entityInfos.add(EI_FIELDGROUP);
		entityInfos.add(EI_BINARY);
		entityInfos.add(EI_CLIENTFILTER);
		entityInfos.add(EI_DEFAULTUSER);
		entityInfos.add(EI_DYNAMICFIELDINSTANCE);
		entityInfos.add(EI_DYNAMICFIELDTEMPLATE);
		«FOREACH entities AS e-»
		entityInfos.add(EI_«e.name.toUpperCase()»);
		«ENDFOREACH-»
	}

	@Override
	public Class<?> getHomeActivityClass() {
		return «name.toFirstUpper()»Listing.class;
	}

	@Override
	public List<EntityInfo> getEntityInfos() {
		return entityInfos;
	}

}
«ENDFILE»
«ENDDEFINE»