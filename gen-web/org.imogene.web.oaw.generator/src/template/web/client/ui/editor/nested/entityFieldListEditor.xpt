«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String packageName, String projectName) FOR CardEntity»

	«EXPAND createListEditor(packageName, projectName) FOREACH groups.fields»

«ENDDEFINE»


«DEFINE createListEditor(String packageName, String projectName) FOR FieldEntity»«ENDDEFINE»
«DEFINE createListEditor(String packageName, String projectName) FOR RelationFieldEntity»
«IF nestedForm && entity.nestedFields!=null && !entity.nestedFields.isEmpty && cardinality==-1 || cardinality>1-»
«FILE projectName.toLowerCase()+ "/client/ui/editor/nested/" + parentGroup.parentCard.name.toFirstUpper() + name.toFirstUpper() + "ListEditor.java"-»
package org.imogene.«projectName.toLowerCase()».client.ui.editor.nested;

import java.util.ArrayList;
import java.util.List;

import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;
import org.imogene.«projectName.toLowerCase()».shared.«projectName.toFirstUpper()»RequestFactory;
import org.imogene.«projectName.toLowerCase()».shared.proxy.*;
import org.imogene.«projectName.toLowerCase()».shared.request.«parentGroup.parentCard.name.toFirstUpper()»Request;

import org.imogene.web.client.i18n.BaseNLS;
import org.imogene.web.client.ui.field.ImogField;
import org.imogene.web.client.ui.field.group.FieldGroupPanel;
import org.imogene.web.client.util.ImogKeyGenerator;
import org.imogene.web.shared.proxy.GeoFieldProxy;
import org.imogene.web.shared.request.ImogEntityRequest;

import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.Editor.Ignore;
import com.google.gwt.editor.client.EditorError;
import com.google.gwt.editor.client.IsEditor;
import com.google.gwt.editor.client.adapters.EditorSource;
import com.google.gwt.editor.client.adapters.ListEditor;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;


/**
 * Editor that provides the UI components to manage the list of «entity.name.toFirstUpper()»EditorNestedRow
 * in the «parentGroup.parentCard.name.toFirstUpper()» editor
 * @author MEDES-IMPS
 */
public class «parentGroup.parentCard.name.toFirstUpper()»«name.toFirstUpper()»ListEditor extends Composite implements IsEditor<ListEditor<«entity.name.toFirstUpper()»Proxy, «entity.name.toFirstUpper()»EditorNestedRow>> {

	private static EditorUiBinder uiBinder = GWT.create(EditorUiBinder.class);

	interface EditorUiBinder extends UiBinder<Widget, «parentGroup.parentCard.name.toFirstUpper()»«name.toFirstUpper()»ListEditor> {	}

	protected final «projectName.toFirstUpper()»RequestFactory requestFactory;	
	private «entity.name.toFirstUpper()»ListEditorSource editorSource;
	private ListEditor<«entity.name.toFirstUpper()»Proxy, «entity.name.toFirstUpper()»EditorNestedRow> editor;
	//private ListEditor<«entity.name.toFirstUpper()»Proxy, «entity.name.toFirstUpper()»EditorNestedForm> editor;
	private ImogEntityRequest request;
		«IF parentGroup.parentCard.name.toFirstUpper().matches("Reception") && (name.toFirstUpper().matches("Intrants") || name.toFirstUpper().matches("Medicaments"))-»
	private CommandeProxy currentCommande;
	private CentreDiagTraitProxy currentCdt;
		«ELSEIF parentGroup.parentCard.name == "Inventaire" || parentGroup.parentCard.name == "Reception"-»
	private CentreDiagTraitProxy currentCdt;
		«ELSEIF parentGroup.parentCard.name == "Ravitaillement"-»
	private CentreDiagTraitProxy currentCdtEntrant;
	private CentreDiagTraitProxy currentCdtSortant;
		«ENDIF-»
		
		


	@UiField(provided = true)
	@Ignore
	FieldGroupPanel listSection;
	@UiField(provided = true)
	VerticalPanel listContainer;
	@UiField(provided = true)
	@com.google.gwt.editor.client.Editor.Ignore
	Image addItem;

	/* header row (field names) */
	«FOREACH entity.nestedFields AS f -»
	«IF parentGroup.parentCard.name.toFirstUpper().matches("Reception") && (name.toFirstUpper().matches("Intrants") || name.toFirstUpper().matches("Medicaments")) && f.name.matches("Commande") -»	
	«ELSE -»
	@UiField
	@Ignore
	Label «EXPAND template::CommonFieldUtil::propertyName FOR f»Label;		
	«ENDIF -»
		«IF parentGroup.parentCard.name.toFirstUpper().matches("Ravitaillement") && name.toFirstUpper().matches("Details") && (f.name.matches("SortieLot") || f.name.matches("EntreeLot"))-»
	@UiField
	@Ignore
	Label «EXPAND template::CommonFieldUtil::propertyName FOR f»QuantiteLabel;	
		«ELSEIF parentGroup.parentCard.name.toFirstUpper().matches("Reception") && (name.toFirstUpper().matches("Intrants") || name.toFirstUpper().matches("Medicaments")) && f.name.matches("EntreeLot")-»
	@UiField
	@Ignore
	Label «EXPAND template::CommonFieldUtil::propertyName FOR f»QuantiteLabel;			
		«ENDIF -»		
	«ENDFOREACH -»	

	public «parentGroup.parentCard.name.toFirstUpper()»«name.toFirstUpper()»ListEditor(«projectName.toFirstUpper()»RequestFactory factory) {

		this.requestFactory = factory;
		editorSource = new «entity.name.toFirstUpper()»ListEditorSource();
		editor = ListEditor.of(editorSource);

		listContainer = new VerticalPanel();
		addItem = new Image(GWT.getModuleBaseURL() + "images/relation_add.png");
		addItem.setTitle(BaseNLS.constants().button_add());

		listSection = new FieldGroupPanel();
		listSection.setGroupTitle(NLS.constants().«parentGroup.parentCard.name.toFirstLower()»_field_«name.toFirstLower()»());
		listSection.setLabelFontSize("12px");
		listSection.addStyleName("fieldGroup-ListEditor");

		initWidget(uiBinder.createAndBindUi(this));
		
	«FOREACH entity.nestedFields AS f -»
		«IF parentGroup.parentCard.name.toFirstUpper().matches("Patient") && name.toFirstUpper().matches("Serologies") && f.name.matches("ResultatVIH")-»
		«ELSEIF parentGroup.parentCard.name.toFirstUpper().matches("Reception") && (name.toFirstUpper().matches("Intrants") || name.toFirstUpper().matches("Medicaments")) && f.name.matches("Commande") -»	
		«ELSEIF parentGroup.parentCard.name.toFirstUpper().matches("Inventaire") && name.toFirstUpper().matches("Details") && f.name.matches("CDT") -»
		«ELSE -»
		«EXPAND template::CommonFieldUtil::propertyName FOR f»Label.setText(NLS.constants().«entity.name.toFirstLower()»_field_«f.name.toFirstLower()»());
		«ENDIF -»
		«IF DateField.isAssignableFrom(f.metaType)-»
			«EXPAND template::CommonFieldUtil::propertyName FOR f»Label.setWidth("153px");	
		«ENDIF-»
		«IF parentGroup.parentCard.name.toFirstUpper().matches("Ravitaillement") && name.toFirstUpper().matches("Details") && (f.name.matches("SortieLot") || f.name.matches("EntreeLot"))-»
		«EXPAND template::CommonFieldUtil::propertyName FOR f»QuantiteLabel.setText(NLS.constants().«EXPAND template::CommonFieldUtil::propertyName FOR f»_field_quantite());		
		«ELSEIF parentGroup.parentCard.name.toFirstUpper().matches("Reception") && (name.toFirstUpper().matches("Intrants") || name.toFirstUpper().matches("Medicaments")) && f.name.matches("EntreeLot")-»
		«EXPAND template::CommonFieldUtil::propertyName FOR f»QuantiteLabel.setText(NLS.constants().«EXPAND template::CommonFieldUtil::propertyName FOR f»_field_quantite());
		«ENDIF -»			
	«ENDFOREACH -»
	
	«IF parentGroup.parentCard.name.toFirstUpper().matches("Patient") && name.toFirstUpper().matches("ExamensBiologiques")-»
		dateLabel.setWidth("100px");
	«ELSEIF parentGroup.parentCard.name.toFirstUpper().matches("Patient") && name.toFirstUpper().matches("Serologies")-»
		dateTestLabel.setWidth("100px");
	«ENDIF-»	
	}

	/**
	 * Remove the «entity.name.toFirstUpper()» at the specified index
	 * @param index of the «entity.name.toFirstUpper()»
	 */
	private void remove(int index) {
		editor.getList().remove(index);
	}

	/**
	 * Get the «entity.name.toFirstUpper()» at the specified index
	 * @param index of the «entity.name.toFirstUpper()»
	 */
	private «entity.name.toFirstUpper()»Proxy getProxy(int index) {
		return editor.getList().get(index);
	}

	@Override
	public ListEditor<«entity.name.toFirstUpper()»Proxy, «entity.name.toFirstUpper()»EditorNestedRow> asEditor() {
		return editor;
	}

	@UiHandler("addItem")
	void onAddClick(ClickEvent event) {
		add();
	}

	/**
	 * Adds a new value to the editor list
	 * Prerequisite: Context must have been set through the SetRequestContext method
	 */
	private void add() {
		«entity.name.toFirstUpper()»Proxy new«entity.name.toFirstUpper()» = request.create(«entity.name.toFirstUpper()»Proxy.class);
		new«entity.name.toFirstUpper()».setId(ImogKeyGenerator.generateKeyId("«entity.shortName»"));
		new«entity.name.toFirstUpper()».setVersion(0);
		«EXPAND template::web::client::ui::editor::entityEditorWorkflow::defaultValue("new" + entity.name.toFirstUpper()) FOREACH entity.nestedFields-»
		//request.save«name.toFirstUpper()»(new«entity.name.toFirstUpper()», true);
		
		«IF parentGroup.parentCard.name == "Reception" && name == "Intrants"-»
		newDetailReceptionIntrant.setCommande(currentCommande);
		«ELSEIF parentGroup.parentCard.name == "Reception" && name == "Medicaments"-»
		newDetailReceptionMedicament.setCommande(currentCommande);
		«ELSEIF parentGroup.parentCard.name == "Inventaire"-»
		newDetailInventaire.setCDT(currentCdt);
		«ENDIF-»
		
		addValue(new«entity.name.toFirstUpper()», true);
	}
	
	/**
	 * Adds a list of values to the editor list
	 */
	private void addValue(«entity.name.toFirstUpper()»Proxy value, boolean isNew) {
		if(value!=null) {
			if (editor.getList() == null)
				editor.setValue(new ArrayList<«entity.name.toFirstUpper()»Proxy>());
			editor.getList().add(value);
			updateIndex();
			
			// update subeditor
			List<«entity.name.toFirstUpper()»EditorNestedRow> editors = editor.getEditors();
			«entity.name.toFirstUpper()»EditorNestedRow subEditor = editors.get(editors.size() - 1);
			subEditor.setNewProxy(isNew);
			subEditor.computeVisibility(null, true);
			subEditor.setEdited(true);	
			«IF parentGroup.parentCard.name == "Reception" && (name == "Intrants" || name == "Medicaments")-»
			subEditor.setCommande(currentCommande, true);
			subEditor.setCDT(currentCdt, true);
			«ELSEIF parentGroup.parentCard.name == "Ravitaillement"-»
			subEditor.setCDTEntrant(currentCdtEntrant, true);
			subEditor.setCDTSortant(currentCdtSortant, true);
			«ELSEIF parentGroup.parentCard.name == "Inventaire"-»
			subEditor.setCDT(currentCdt, true);
			«ELSEIF parentGroup.parentCard.name == "Reception"-»
			subEditor.setCDT(currentCdt, true);
			«ENDIF-»				
		}
	}	


	public void up(«entity.name.toFirstUpper()»EditorNestedRow editor) {
		int currentIndex = listContainer.getWidgetIndex(editor);
		if (currentIndex > 0) {
			listContainer.insert(editor, currentIndex - 1);
			updateIndex();
		}
	}

	public void down(«entity.name.toFirstUpper()»EditorNestedRow editor) {
		int currentIndex = listContainer.getWidgetIndex(editor);
		if (currentIndex < listContainer.getWidgetCount() + 1) {
			listContainer.insert(editor, currentIndex + 2);
			updateIndex();
		}
	}
	
	private void updateIndex() {
		int count = listContainer.getWidgetCount();
		for (int i = 0; i < count; i++) {
			«entity.name.toFirstUpper()»EditorNestedRow subEditor = («entity.name.toFirstUpper()»EditorNestedRow) listContainer.getWidget(i);
			subEditor.setIndex(i);
		}
	}


	public void setRequestContextForListEditors(ImogEntityRequest ctx) {
		this.request = ctx;
	}


	public void setEdited(boolean isEdited) {

		List<«entity.name.toFirstUpper()»EditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for («entity.name.toFirstUpper()»EditorNestedRow subEditor : editors)
				subEditor.setEdited(isEdited);
		}
		addItem.setVisible(isEdited);
	}
	
	public void computeVisibility(ImogField<?> source, boolean allValidation) {

		List<«entity.name.toFirstUpper()»EditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for («entity.name.toFirstUpper()»EditorNestedRow subEditor : editors)
				subEditor.computeVisibility(source, allValidation);
		}
	}
	
	«IF parentGroup.parentCard.name.toFirstUpper().matches("Reception") && name.toFirstUpper().matches("Intrants")-»
	public void setCommande(CommandeProxy value) {
		currentCommande = value;
	}

	public void updateCommande(CommandeProxy value) {
		setCommande(value);
		List<DetailReceptionIntrantEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailReceptionIntrantEditorNestedRow subEditor : editors)
				subEditor.setCommande(value, true);
		}
	}
	
	public void setCDT(CentreDiagTraitProxy value) {
		currentCdt = value;
	}

	public void updateCDT(CentreDiagTraitProxy value) {
		setCDT(value);
		List<DetailReceptionIntrantEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailReceptionIntrantEditorNestedRow subEditor : editors)
				subEditor.setCDT(value, true);
		}
	}
	«ELSEIF parentGroup.parentCard.name.toFirstUpper().matches("Reception") && name.toFirstUpper().matches("Medicaments")-»
	public void setCommande(CommandeProxy value) {
		currentCommande = value;
	}

	public void updateCommande(CommandeProxy value) {
		setCommande(value);
		List<DetailReceptionMedicamentEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailReceptionMedicamentEditorNestedRow subEditor : editors)
				subEditor.setCommande(value, true);
		}
	}
	
	public void setCDT(CentreDiagTraitProxy value) {
		currentCdt = value;
	}

	public void updateCDT(CentreDiagTraitProxy value) {
		setCDT(value);
		List<DetailReceptionMedicamentEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailReceptionMedicamentEditorNestedRow subEditor : editors)
				subEditor.setCDT(value, true);
		}
	}	
	«ELSEIF parentGroup.parentCard.name == "Ravitaillement"-»
	public void setCDTEntrant(CentreDiagTraitProxy value) {
		currentCdtEntrant = value;
	}

	public void updateCDTEntrant(CentreDiagTraitProxy value) {
		setCDTEntrant(value);
		List<DetailRavitaillementEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailRavitaillementEditorNestedRow subEditor : editors)
				subEditor.setCDTEntrant(value, true);
		}
	}

	public void setCDTSortant(CentreDiagTraitProxy value) {
		currentCdtSortant = value;
	}

	public void updateCDTSortant(CentreDiagTraitProxy value) {
		setCDTSortant(value);
		List<DetailRavitaillementEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailRavitaillementEditorNestedRow subEditor : editors)
				subEditor.setCDTSortant(value, true);
		}
	}
	«ELSEIF parentGroup.parentCard.name == "Inventaire"-»
	public void setCDT(CentreDiagTraitProxy value) {
		currentCdt = value;
	}

	public void updateCDT(CentreDiagTraitProxy value) {
		setCDT(value);
		List<DetailInventaireEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailInventaireEditorNestedRow subEditor : editors)
				subEditor.setCDT(value, true);
		}
	}
	«ELSEIF parentGroup.parentCard.name == "Reception" && name == "Intrants"-»
	public void setCDT(CentreDiagTraitProxy value) {
		currentCdt = value;
	}

	public void updateCDT(CentreDiagTraitProxy value) {
		setCDT(value);
		List<DetailReceptionIntrantEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailReceptionIntrantEditorNestedRow subEditor : editors)
				subEditor.setCDT(value, true);
		}
	}
	«ELSEIF parentGroup.parentCard.name == "Reception" && name == "Medicaments"-»
	public void setCDT(CentreDiagTraitProxy value) {
		currentCdt = value;
	}

	public void updateCDT(CentreDiagTraitProxy value) {
		setCDT(value);
		List<DetailReceptionMedicamentEditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for (DetailReceptionMedicamentEditorNestedRow subEditor : editors)
				subEditor.setCDT(value, true);
		}
	}
	«ENDIF»
	
	/**
	 * Validate nested forms fields values
	 */
	public void validateFields() {
		
		List<«entity.name.toFirstUpper()»EditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for («entity.name.toFirstUpper()»EditorNestedRow subEditor : editors)
				subEditor.validateFields();
		}
	}
	
	/**
	 * Dispatch show errors to nested rows 
	 */
	public void showErrors(List<EditorError> errors) {
		List<«entity.name.toFirstUpper()»EditorNestedRow> editors = editor.getEditors();
		if (editors != null && editors.size() > 0) {
			for («entity.name.toFirstUpper()»EditorNestedRow subEditor : editors)
				subEditor.showErrors(errors);
		}
	}
	
	/**
	 * Internal class
	 */
	private class «entity.name.toFirstUpper()»ListEditorSource extends EditorSource<«entity.name.toFirstUpper()»EditorNestedRow> {

		@Override
		public «entity.name.toFirstUpper()»EditorNestedRow create(int index) {
			
			final «entity.name.toFirstUpper()»EditorNestedRow subEditor = new «entity.name.toFirstUpper()»EditorNestedRow(requestFactory);
			subEditor.setIndex(index);
			listContainer.insert(subEditor, index);

			subEditor.setDeleteClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					if (Window.confirm(BaseNLS.constants().confirmation_delete())) {
						«entity.name.toFirstUpper()»Proxy proxy = getProxy(subEditor.getIndex());
						if(!subEditor.isNewProxy())
							request.delete(proxy);
						remove(subEditor.getIndex());
						updateIndex();
					}
				}
			});
			return subEditor;
		}

		@Override
		public void dispose(«entity.name.toFirstUpper()»EditorNestedRow subEditor) {
			subEditor.removeFromParent();
		}

		@Override
		public void setIndex(«entity.name.toFirstUpper()»EditorNestedRow subEditor, int index) {
			listContainer.insert(subEditor, index);
		}
	}
}
«ENDFILE»
«ENDIF-»
«ENDDEFINE»